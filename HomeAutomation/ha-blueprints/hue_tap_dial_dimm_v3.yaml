blueprint:
  name: Hue Tap Dial Dimm v3
  description: 'Control lights with a Philips Hue Tap Switch. Use the four buttons
    to control up to four light(s) with an on/off toggle. The dial can be used to
    dim the most recently used light. '
  domain: automation
  source_url: https://github.com/jansvensen/stuff/blob/main/ha-blueprints/hue_tap_dial_dimm.yaml
  input:
    remote:
      name: Dimmer Remote Device
      description: "Your Hue Tap Dial"
      selector:
        device:
          integration: hue
    first_light:
      name: First Light
      description: The light(s) to control with first button
      selector:
        target:
          entity: {}
    second_light:
      name: (OPTIONAL) Second Light
      description: The light(s) to control with second button
      default: {}
      selector:
        target:
          entity: {}
    third_light:
      name: (OPTIONAL) Third Light
      description: The light(s) to control with third button
      default: {}
      selector:
        target:
          entity: {}
    forth_light:
      name: (OPTIONAL) Forth Light
      description: The light(s) to control with forth button
      default: {}
      selector:
        target:
          entity: {}
    current_light:
      name: (OPTIONAL) Current Light
      description: Text helper to track the current light to dim. Set for the dimmer
        controls to change which light they are controlling according to the last
        one turned on.
      default:
      selector:
        entity:
          domain: input_text
          multiple: false
    dim_scale:
      name: Diming Scale
      description: Scale factor for the dimming. This value will be multiplied by
        the value given from the dial. So lower number, more gradual dimming. Larger
        number, faster dimming.
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01
          mode: slider
mode: restart
max_exceeded: silent
variables:
  first_light: !input first_light
  second_light: !input second_light
  third_light: !input third_light
  forth_light: !input forth_light
  current_light: !input current_light
  dim_scale: !input dim_scale
  lights:
    first_light: !input first_light
    second_light: !input second_light
    third_light: !input third_light
    forth_light: !input forth_light
trigger:
- platform: event
  event_type: hue_event
  event_data:
    device_id: !input remote
action:
- variables:
    command: '{{ trigger.event.data.type }}'
    subtype: '{{ trigger.event.data.subtype }}'
    args: '{{ trigger.event.data.args }}'
    params: '{{ trigger.event.data.params }}'
    step_mode: '{{ trigger.event.data.params.step_mode }}'
    step_size: '{{ trigger.event.data.params.step_size }}'
- choose:
  - conditions:
    - '{{ command == ''short_release'' }}'
    - '{{ subtype == 1 }}'
    sequence:
      - choose:
        - conditions: '{{ states(first_light.entity_id) == ''off'' }}'
          sequence:
          - service: light.turn_on
            target: '{{ first_light }}'
            data:
              transition: 1
              brightness: 50
        default:
          - choose:
            - conditions: '{{ states(current_light) == ''first_light'' }}'
              sequence:
              - service: light.turn_off
                target: '{{ first_light }}'
      - choose:
        - conditions: '{{ current_light != none }}'
          sequence:
          - service: input_text.set_value
            target:
              entity_id: !input current_light
            data:
              value: '{{ ''first_light'' }}'
  - conditions:
    - '{{ command == ''short_release'' }}'
    - '{{ second_light != none }}'
    - '{{ subtype == 2 }}'
    sequence:
      - choose:
        - conditions: '{{ states(second_light.entity_id) == ''off'' }}'
          sequence:
          - service: light.turn_on
            target: '{{ second_light }}'
            data:
              transition: 1
              brightness: 50
        default:
          - choose:
            - conditions: '{{ states(current_light) == ''second_light'' }}'
              sequence:
              - service: light.turn_off
                target: '{{ second_light }}'
      - choose:
        - conditions: '{{ current_light != none }}'
          sequence:
          - service: input_text.set_value
            target:
              entity_id: !input current_light
            data:
              value: '{{ ''second_light'' }}'
  - conditions:
    - '{{ command == ''short_release'' }}'
    - '{{ third_light != none }}'
    - '{{ subtype == 3 }}'
    sequence:
      - choose:
        - conditions: '{{ states(third_light.entity_id) == ''off'' }}'
          sequence:
          - service: light.turn_on
            target: '{{ third_light }}'
            data:
              transition: 1
              brightness: 50
        default:
          - choose:
            - conditions: '{{ states(current_light) == ''third_light'' }}'
              sequence:
              - service: light.turn_off
                target: '{{ third_light }}'
      - choose:
        - conditions: '{{ current_light != none }}'
          sequence:
          - service: input_text.set_value
            target:
              entity_id: !input current_light
            data:
              value: '{{ ''third_light'' }}'
  - conditions:
    - '{{ command == ''short_release'' }}'
    - '{{ forth_light != none }}'
    - '{{ subtype == 4 }}'
    sequence:
      - choose:
        - conditions: '{{ states(forth_light.entity_id) == ''off'' }}'
          sequence:
          - service: light.turn_on
            target: '{{ forth_light }}'
            data:
              transition: 1
              brightness: 50
        default:
          - choose:
            - conditions: '{{ states(current_light) == ''forth_light'' }}'
              sequence:
              - service: light.turn_off
                target: '{{ forth_light }}'
      - choose:
        - conditions: '{{ current_light != none }}'
          sequence:
          - service: input_text.set_value
            target:
              entity_id: !input current_light
            data:
              value: '{{ ''forth_light'' }}'
  - conditions:
    - '{{ command == ''step_with_on_off'' }}'
    - '{{ step_mode == ''StepMode.Up'' }}'
    sequence:
    - choose:
      - conditions: '{{ current_light != none }}'
        sequence:
        - service: light.turn_on
          target: '{{ lights[states(current_light)] }}'
          data:
            brightness_step_pct: '{{ step_size * dim_scale }}'
            transition: 1
      default:
      - service: light.turn_on
        target: !input first_light
        data:
          brightness_step_pct: '{{ step_size * dim_scale }}'
          transition: 1
  - conditions:
    - '{{ command == ''step_with_on_off'' }}'
    - '{{ step_mode == ''StepMode.Down'' }}'
    sequence:
    - choose:
      - conditions: '{{ current_light != none }}'
        sequence:
        - service: light.turn_on
          target: '{{ lights[states(current_light)] }}'
          data:
            brightness_step_pct: '{{ -step_size * dim_scale }}'
            transition: 1
      default:
      - service: light.turn_on
        target: !input first_light
        data:
          brightness_step_pct: '{{ -step_size * dim_scale }}'
          transition: 1