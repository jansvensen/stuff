---
- name: create a directory for installer download
  win_file: 
    path: '{{ directory_install }}'
    state: directory

- name: create the configuration file
  win_template: 
    src: files/sql_conf.ini.j2
    dest: '{{ directory_install }}\sql_conf.ini'

- name: Install SQL Pre-Reqs
  win_feature:
    name: '{{ item }}'
    state: present
  with_items: '{{ sql_prereqs }}'
  register: win_feature

- name: Reboot if features require
  win_reboot:
  when: win_feature.changed
  
- name: check SQL setup file exists
  win_stat:
    path: '{{ directory_install }}\SQLEXPRADV_x64_ENU.exe'
  register: installer_file

- name: get the SQL Express 2019 Installer
  win_get_url:
    url: 'https://download.microsoft.com/download/8/4/c/84c6c430-e0f5-476d-bf43-eaaa222a72e0/SQLEXPRADV_x64_ENU.exe'
    dest: '{{ directory_install }}\SQLEXPRADV_x64_ENU.exe'
  when: not installer_file.stat.exists

- name: check PSTools Installer exists
  win_stat:
    path: '{{ directory_install }}\PSTools.zip'
  register: installer_pstools

- name: get the PSTools installer
  win_get_url:
    url: 'https://download.sysinternals.com/files/PSTools.zip'
    dest: '{{ directory_install }}\PSTools.zip'
  when: not installer_pstools.stat.exists

- name: check extraced PSTools files exists
  win_stat:
    path: '{{ directory_install }}\PSTools'
  register: pstools_dir

- name: Unzip PSTools installer
  win_unzip:
    src: '{{ directory_install }}\PSTools.zip'
    dest: '{{ directory_install }}\PSTools'
  when: not pstools_dir.stat.exists 

- name: check SQL installer dir exists
  win_stat:
    path: '{{ directory_install }}\SQLEXPRADV_x64_ENU'
  register: installer_dir

- name: extract the installer files
  win_command: '{{ directory_install }}\SQLEXPRADV_x64_ENU.exe /q /x {{ directory_install }}\SQLEXPRADV_x64_ENU'
  args:
    chdir: '{{ directory_install }}'
  when: not installer_dir.stat.exists

- name: Check if SQL Instance is installed
  win_service:
    name: 'MSSQL${{ sql_instance_name }}'
  register: service_installed
 
- name: Display Install State
  debug:
    var: service_installed

- name: Install MS SQL Server using psexec module
  win_psexec:
   command: '{{ directory_install }}\SQLEXPRADV_x64_ENU\setup.exe /IAcceptSQLServerLicenseTerms /configurationfile={{ directory_install }}\sql_conf.ini'
   system: yes
   executable: '{{ directory_install }}\PSTools\psexec.exe'
  when: not service_installed.exists 

- name: Add or update registry for TCPPort
  win_regedit:
    path: 'HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL15.{{ sql_instance_name }}\MSSQLServer\SuperSocketNetLib\Tcp\IPAll'
    name: TcpPort
    data: 1433
  register: reg1

- name: Display reg1
  debug:
    var: reg1

- name: Add or update registry for TCPDynamicPorts
  win_regedit:
    path: 'HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL15.{{ sql_instance_name }}\MSSQLServer\SuperSocketNetLib\Tcp\IPAll'
    name: TcpDynamicPorts
    data: 
  register: reg2

- name: Display reg2
  debug:
    var: reg2

- name: Restart a service
  win_service:
    name: 'MSSQL${{ sql_instance_name }}'
    force_dependent_services: yes
    state: restarted
  when: reg1.data_changed == true or reg2.data_changed == true

- name: Install Microsoft .NET Framework (Preq SQL Management Studio)
  win_chocolatey:
    name: dotnet4.6.1
    state: present

- name: Install SQL Management Studio
  win_chocolatey:
    name: sql-server-management-studio
    state: present

- name: Reboot
  win_reboot: