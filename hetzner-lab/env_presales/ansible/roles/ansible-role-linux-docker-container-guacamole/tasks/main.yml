---
- name: Create guac directory
  ansible.builtin.file:
    path: "{{ docker_container_guac_volume_dir }}"
    state: directory
  become: yes

- name: Create guac-db directory
  ansible.builtin.file:
    path: "{{ docker_container_guac_db_volume_dir }}"
    state: directory
  become: yes

- name: Create mysql_init directory
  ansible.builtin.file:
    path: "{{ docker_container_guac_volume_dir }}/mysql_init"
    state: directory
  become: yes

- name: Generate .env file from template
  ansible.builtin.template:
    src: templates/docker_container/guac/sample.env.j2
    dest: "{{ docker_container_guac_volume_dir }}/.env"
  register: docker_container_guac_env_result
  become: yes

- name: Stop existing containers
  docker_container:
    name: "{{ item }}"
    state: absent
    container_default_behavior: no_defaults
  with_items: "{{ docker_container_names }}"
  become: yes
 
- name: Remove Docker networks
  docker_network:
    name: "{{ item }}_backend"
    force: yes
    state: absent
  with_items: "{{ docker_container_names }}"
  become: yes

- name: Remove Docker files
  ansible.builtin.file:
    path: "{{ docker_container_volume_dir }}"
    state: absent
  when: docker_container_volume_dir is defined
  become: yes

- name: Copy sql connection config file
  template:
    src: templates/docker_container/guac-db/my.cnf
    dest: "{{ docker_container_guac_db_volume_dir }}/my.cnf"
  become: yes

- name: Copy server.xml
  template:
    src: templates/docker_container/guac/guac_conf/server.xml
    dest: "{{ docker_container_guac_volume_dir }}/server.xml"
  become: yes

- name: Copy schema.sql
  template:
    src: templates/docker_container/guac/schema.sql.j2
    dest: "{{ docker_container_guac_volume_dir }}/mysql_init/schema.sql"
  become: yes

- name: GUAC - create auth-totp extenstions directory
  ansible.builtin.file:
    path: "{{ docker_container_guac_volume_dir }}/guac_home/extensions"
    state: directory
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled
  become: yes

- name: GUAC - download auth-totp
  unarchive:
    src: 'https://apache.org/dyn/closer.lua/guacamole/{{ docker_container_guac_version }}/binary/guacamole-auth-totp-{{ docker_container_guac_version }}.tar.gz?action=download'
    dest: '{{ docker_container_guac_volume_dir }}'
    creates: '{{ docker_container_guac_volume_dir }}/guacamole-auth-totp-{{ docker_container_guac_version }}/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    remote_src: yes
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled
  become: yes

- name: GUAC - copy auth-totp to extension directory
  copy:
    src: '{{ docker_container_guac_volume_dir }}/guacamole-auth-totp-{{ docker_container_guac_version }}/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    dest: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    remote_src: yes
  register: docker_container_guac_mfa_result
  tags: docker_container_guac_mfa
  when: guac_mfa_enabled
  become: yes

- name: GUAC - check if auth-totp extenstions file exists
  ansible.builtin.stat:
    path: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
  register: docker_container_guac_mfa_file_exists_result
  become: yes

- name: GUAC - remove auth-totp extenstions file
  ansible.builtin.file:
    path: '{{ docker_container_guac_volume_dir }}/guac_home/extensions/guacamole-auth-totp-{{ docker_container_guac_version }}.jar'
    state: absent
  register: docker_container_guac_mfa_file
  tags: docker_container_guac_mfa
  when:
    - guac_mfa_enabled == false
    - docker_container_guac_mfa_file_exists_result.stat.exists
  become: yes

- name: GUAC - backend net
  docker_network:
    name: "{{ docker_container_guac_name }}_backend"
    driver: bridge
    attachable: yes
    enable_ipv6: no
    internal: no
    state: present
  become: yes

- name: Create Docker container guacd
  docker_container:
    name: "{{ docker_container_guac_d_name }}"
    image: "{{ docker_container_guac_d_image }}"
    state: started
    #recreate: "{{ docker_container_guac_recreate | default('no') }}"
    #restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"
  become: yes

- name: Create Docker container guacamole
  docker_container:
    name: "{{ docker_container_guac_name }}"
    image: "{{ docker_container_guac_image }}"
    state: started
    #recreate: "{{ docker_container_guac_recreate | default('no') }}"
    #restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    env_file: "{{ docker_container_guac_volume_dir }}/.env"
    env:
      GUACAMOLE_HOME: "/guac_home"
      MYSQL_HOSTNAME: "{{ docker_container_guac_db_name }}"
      MYSQL_USER: '{{ guac_db_user }}'
      MYSQL_PASSWORD: '{{ guac_db_password }}'
      MYSQL_DATABASE: '{{ guac_db_name }}'
      GUACD_HOSTNAME: "{{ docker_container_guac_d_name }}"
      GUACD_PORT: "4822"
      # LDAP_HOSTNAME: "${LDAP_HOSTNAME}"
      # LDAP_PORT: "${LDAP_PORT:-389}"
      # LDAP_ENCRYPTION_METHOD: "${LDAP_ENCRYPTION_METHOD:-none}"
      # LDAP_USER_BASE_DN: "${LDAP_USER_BASE_DN}"
      # LDAP_GROUP_BASE_DN: "${LDAP_GROUP_BASE_DN}"
      # LDAP_SEARCH_BIND_DN: "${LDAP_SEARCH_BIND_DN}"
      # LDAP_SEARCH_BIND_PASSWORD: "${LDAP_SEARCH_BIND_PASSWORD}"
      # LDAP_USERNAME_ATTRIBUTE: "${LDAP_USERNAME_ATTRIBUTE:-userPrincipalName}"
      # LDAP_GROUP_NAME_ATTRIBUTE: "${LDAP_GROUP_NAME_ATTRIBUTE:-cn}"
      # LDAP_MEMBER_ATTRIBUTE: "${LDAP_MEMBER_ATTRIBUTE:-member}"
      # LDAP_USER_SEARCH_FILTER: "${LDAP_USER_SEARCH_FILTER:-(&(objectCategory=person)(objectclass=user)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))}"
      # TOTP_ISSUER: "${FQDN_HOST_NAME:?err}"
    volumes:
      - "{{ docker_container_guac_volume_dir }}/guac_home:/guac_home"
      - "{{ docker_container_guac_volume_dir }}/server.xml:/usr/local/tomcat/conf/server.xml"
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"
        links:
          - "{{ docker_container_guac_db_name }}"
          - "{{ docker_container_guac_d_name }}"
    published_ports:
      - "8081:8080"
  become: yes

- name: Create Docker container guac-db
  docker_container:
    name: "{{ docker_container_guac_db_name }}"
    image: "{{ docker_container_guac_db_image }}"
    state: started
    # recreate: "{{ docker_container_guac_recreate | default('no') }}"
    # restart: "{{ (docker_container_guac_env_result.changed or (docker_container_guac_mfa_result is defined and docker_container_guac_mfa_result.changed) or (docker_container_guac_mfa_file is defined and docker_container_guac_mfa_file.changed)) | ternary('yes', 'no') }}"
    restart_policy: always
    container_default_behavior: no_defaults
    auto_remove: no
    detach: yes
    init: no
    interactive: no
    memory: "0"
    paused: no
    privileged: no
    read_only: no
    tty: no
    env_file: "{{ docker_container_guac_volume_dir }}/.env"
    env:
      MYSQL_ROOT_PASSWORD: "{{ guac_db_password }}"
      MYSQL_USER: "{{ guac_db_user }}"
      MYSQL_PASSWORD: "{{ guac_db_password }}"
      MYSQL_DATABASE: "{{ guac_db_name }}"
    volumes:
      - "{{ docker_container_guac_volume_dir }}/mysql:/var/lib/mysql"
      - "{{ docker_container_guac_db_volume_dir }}:/tmp/mysql-config-file"
      - "{{ docker_container_guac_volume_dir }}/mysql_init/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro"
    networks_cli_compatible: yes
    network_mode: "{{ docker_container_guac_name }}_backend"
    purge_networks: yes
    networks:
      - name: "{{ docker_container_guac_name }}_backend"
  become: yes